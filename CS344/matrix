#!/bin/bash -e

# given m1, m2

# dims()    Dimensions of the input matrix 
# # Input:  MxN matrix
# # Output: Prints the row and col count of the input matrix
dims(){
	n_rows=$(cat $1 | wc -l)
	n_cols=$(( $(cat $1 | wc -w)/(n_rows) ))
	
	#print the rows and columns, and new line
	printf "$n_rows $n_cols\n"
}

#	mean()	Mean row vector of the input matrix
# # Input:  MxN matrix
# # Output: 1xN row vector (each element is mean of associated column)
mean(){
	# Count row and cols using same methods from dims()
	n_rows=$(cat $1 | wc -l)
	n_cols=$(( $(cat $1 | wc -w)/(n_rows) ))
	
	# printf "Finding mean of columns\n"
	# printf "$n_rows $n_cols\n"
	
	for ((i=0; i < $n_cols; i++)); do
		# Reset columns sum to 0 at beginning of each loop
		sum=0;
		
		# Iterate across columns (horizontally)
		for elem in $(cat $1 | cut -d $'\t' -f $((i + 1))); do 
			# Iterate down columns (vertically)
			sum=$((sum + elem))
		done
		
		# Adds a tab between elements
		if [ $i != "0" ]; then
			printf "\t"
		fi
		
		printf "%d" $(((sum + (n_rows/2)*( (sum>0)*2-1 )) / n_rows))
		# Equation provided. Prints mean of the row
	done
	#New line for formatting
	printf "\n"
}

#	transpose()	Flips input matrix diagonally
# # Input: 	MxN matrix
# # Output: NxM matrix with flipped values
transpose(){
	n_rows=$(cat $1 | wc -l)
	n_cols=$(( $(cat $1 | wc -w)/(n_rows) ))
	# printf "col_tot = $col_tot\n"
	
	for ((i=0; i < $n_cols; i++)); do
		# Iterate across columns (horizontally)
		col_count=0
		for elem in $(cat $1 | cut -d $'\t' -f $((i + 1))); do 
			# Iterate down columns (vertically)
			col_count=$((col_count+1))
			# Prints the element
			printf "%d" $elem
			
			# Adds a tab between elements, using n_rows as final column
			if [[ $col_count -lt $n_rows ]]; then
				printf "\t"
			fi
		done
		# Print new lines between the transposed rows
		printf "\n"
	done
}

#	add()	Adds two matrices
# # Input:	Two matrices with the same dimesions
# #	Output: One matrix with the dimesions of the first matrix
add(){
	n1_rows=$(cat $1 | wc -l)
	n1_cols=$(( $(cat $1 | wc -w)/(n1_rows) ))

	n2_rows=$(cat $2 | wc -l)
	n2_cols=$(( $(cat $2 | wc -w)/(n2_rows) ))
	
	# Declare two arrays, store files inside
	while read row; do
        m1+=("$row") # Store each row of matrix 1 in an array as a string
    done < "$1"
	
	while read row; do
        m2+=("$row") # Store each row of matrix 2 in an array as a string
    done < "$2"

	if [[ ($n1_rows != $n2_rows || $n1_cols != $n2_cols) && ($n1_rows != $n2_cols || $n1_cols != $n2_rows) ]]; then
		# Dimensions are not identical, and not mirrored
		printf "Error: Matrices unmatched. Invalid operation.\n" >&2
		exit 1
	else 
		# Dimensions are the same: valid
		
		for ((i=0; i < $n1_rows; i++)); do
			# Iterate vertically
			for ((j=0; j < $n1_cols; j++)); do 
				# Iterate horizontally
				if [ $n1_cols != $n2_cols ] || [ $n1_rows != $n2_rows ]; then
					printf "Error: Matrices unmatched. Invalid operation.\n" >&2
					exit 1
				else
					# They match. Correct the column number, then add.
					cor_col=$(((j) * 2))
					a_line=(${m1[$i]})
					b_line=(${m2[$i]})
					a_char=${A_line[$cor_col]}
					b_char=${B_line[$cor_col]}
					printf "A:$a_line + B:$b_line - - a:$a_char + b:$b_char\n"
					cur_elem=$((a_char + b_char))
					# printf "j:cor_col: $j, $cor_col  "
				fi
				
				# Prints the combined element				
				# Adds a tab between elements
				if [ $j != "0" ]; then
					printf "\t"
				fi
				printf "%d" $cur_elem
			done
			# Print new lines between the transposed rows
			printf "\n"
		done
		
	fi
}

#	multiply()	Multiplies two matrices
# # Input:	Two matrices with the same dimesions
# #	Output: One matrix with the dimesions of the first matrix
multiply(){
	n1_rows=$(cat $1 | wc -l)
	n1_cols=$(( $(cat $1 | wc -w)/(n1_rows) ))

	n2_rows=$(cat $2 | wc -l)
	n2_cols=$(( $(cat $2 | wc -w)/(n2_rows) ))
	
	# Declare two arrays, store files inside
	while read row; do
        m1+=("$row") # Store each row of matrix 1 in an array as a string
    done < "$1"
	
	while read row; do
        m2+=("$row") # Store each row of matrix 2 in an array as a string
    done < "$2"
	
	# Check columns of m1 != rows of m2
	
	if [[ (n1_cols = n2_rows) ]]; then
		printf "Error: Matrices are incompatible.\n" >&2
		exit 1
	else 
		# Do the multiplucation
		printf "Multiplying matrices. \n"
	fi

}
#####################################################################
# Main script

# matrix [optn] [arg1] 	[arg2]
# matrix $1		$2		$3

# Use number of parameters the script is run with to decide to read from stdin or a file

# Error case for invalid option
if [ $# = "0" ]; then
    printf "Error: Must input a valid option.\n" >&2
    exit 1
elif [ $1 != "dims" ] && [ $1 != "transpose" ] && [ $1 != "mean" ] && [ $1 != "add" ] && [ $1 != "multiply" ]; then
    printf "Error: Invalid option.\n" >&2
    exit 1
fi

# Selecting option
# For 2 parameter options
if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ]; then 
	if [ $# -gt "2" ]; then
	# Too many inputs passed in
		printf "Error: Excess inputs.\n" >&2
		exit 1
	fi
	# Otherwise, number of options is valid
	
	# Determine if arguments will be passed in from file or from stdin. Check if file is readable
	data_file="data_file_$$"
	if [ "$#" = "1" ]; then
		cat > "$data_file" 
		# Read from stdin
	elif [ "$#" = "2" ]; then
		data_file=$2
		# Read from existing file
	fi
	
	if [[ ! -r $data_file ]]; then
        printf "Error: Input file unreadable.\n" >&2
        exit 1
    fi
	
	# If everything works, call the option
	$1 $data_file
	
	rm -rf data_file_*
	# Remove temp files
	
# For 3 parameter options
else 
	if [ $# != "3" ]; then
		# Too many/few inputs passed in
		printf "Error: Option requires two input matrices.\n" >&2
		exit 1
	elif [[ ! -r $2 || ! -w $2 || ! -r $3 || ! -w $3 ]]; then
		# File can't be read
        printf "Error: Input file(s) unreadable.\n" >&2
		exit 1
	fi
	# No errors, can run option. Use terminal inputs.
	$1 $2 $3
fi

# End of main script
#####################################################################
